<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Request, Redirect, Response, Session, Auth;
use App\Models\Prescriptions;
use App\Models\Patients;
use App\Models\PrescribersPatients;
use App\Models\PrescriptionsDrugs;
use App\Models\Prescribers;
use App\Models\QuestionsSet;
use App\Models\PrescribersSecurityAnswers;
use Illuminate\Support\Facades\Validator;
use App\User;
use App\Services\FileMakerService;

class PrescriberController extends Controller
{
	/*
    |--------------------------------------------------------------------------
    | Prescriber Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the prescriber's views.
    |
    */

    /**
     * Loads all prescriptions generated by authenticated prescriber.
     *
     * @param  NULL
     * @return View
     */
    public function getPrescription(){
		$prescriber_id = Auth::guard('prescriber')->user()->id;
		$sort = Request::get('sort') ? Request::get('sort') : 'desc';
		$orderby = Request::get('orderby') ? Request::get('orderby') : 'date';
		$query = Prescriptions::where('prescriptions.prescriber_id', $prescriber_id)
					->join('patients', 'prescriptions.patient_id','=','patients.id')
					->select('uid', 'prescriptions.date as generated_date', 'patients.title', 'patients.name', 'patients.email', 'prescriptions.id')->orderBy($orderby,$sort);
		if(Request::has('s') && Request::get('s')){
			$s = trim(Request::get('s'));
			$query = $query->where(function($query) use ($s){
				if(Request::has('s-from')){
					$s_from = Request::get('s-from');
					if(in_array('name', $s_from)){
						$query->where('name','LIKE' ,'%' .$s. '%');
					}
					if(in_array('email', $s_from)){
						$query->orWhere('email','LIKE' ,'%' .$s. '%');
					}
					if(in_array('id', $s_from)){
						$query->orWhere('uid','LIKE' ,'%' .$s. '%');
					}
					/*if(in_array('date', $s_from)){
						$query->orWhere('prescriptions.date','LIKE' ,'%' .$s. '%');
					}*/
					if(in_array('summary', $s_from)){
						$prescription_ids = PrescriptionsDrugs::where('drugs.name','LIKE' ,'%' .$s. '%')->join('drugs','prescriptions_drugs.drugs_id', '=', 'drugs.id')->select('prescriptions_drugs.prescriptions_id')->get();
						$ids = [];
						foreach($prescription_ids as $id){
							$ids[] = $id->prescriptions_id;
						}
						$ids = array_unique($ids);
						$query->orWhereIn('prescriptions.id',$ids);
					}
				}else{
					$prescription_ids = PrescriptionsDrugs::where('drugs.name','LIKE' ,'%' .$s. '%')->join('drugs','prescriptions_drugs.drugs_id', '=', 'drugs.id')->select('prescriptions_drugs.prescriptions_id')->get();
					$ids = [];
					foreach($prescription_ids as $id){
						$ids[] = $id->prescriptions_id;
					}
					$ids = array_unique($ids);
					$query->where('name','LIKE' ,'%' .$s. '%')
						->orWhere('email','LIKE' ,'%' .$s. '%')
						->orWhere('uid','LIKE' ,'%' .$s. '%')
						->orWhereIn('prescriptions.id', $ids);
				}
			});
		}
		$query1 = $query;
		$total_prescriptions = $query1->count();
        $presriptions = $query->paginate(10);
		return view('prescribers.prescriptions')
			->with('sort', $sort)
			->with('orderby', $orderby)
			->with('presriptions', $presriptions)
			->with('total_prescriptions', $total_prescriptions);
    }
	 /**
     * Loads all patients generated by authenticated prescriber.
     *
     * @param  NULL
     * @return View
     */
    public function getPatients(){
		$prescriber_id = Auth::guard('prescriber')->user()->id;
		$sort = Request::get('sort') ? Request::get('sort') : 'desc';
		$orderby = Request::get('orderby') ? Request::get('orderby') : 'created_at';
		$query = Patients::select('patients.*')->orderBy($orderby,$sort);
		$prescibers_patietns = PrescribersPatients::where('prescribers_id', $prescriber_id)->select('patients_id')->get();
		$prescibers_belongs_patient_ids = [];
		if($prescibers_patietns){
			foreach($prescibers_patietns as $patient){
				$prescibers_belongs_patient_ids[] = $patient->patients_id;
			}
		}
		if(Request::has('s') && Request::get('s')){
			$s = trim(Request::get('s'));
			$query = $query->where(function($query) use ($s){
				if(Request::has('s-from')){
					$s_from = Request::get('s-from');
					if(in_array('name', $s_from)){
						$query->where('name','LIKE' ,'%' .$s. '%');
					}
					if(in_array('email', $s_from)){
						$query->orWhere('email','LIKE' ,'%' .$s. '%');
					}
					if(in_array('dob', $s_from)){
						$dob = date('Y-m-d', strtotime($s));
						$query->orWhere('date_of_birth',$dob);
					}
					if(in_array('postcode', $s_from)){
						$query->orWhere('postcode','LIKE' ,'%' .$s. '%');
					}

				}else{
					$is_valid_date = $this->isValidDateTimeString(trim($s));
					if($is_valid_date){
						$date = date('Y-m-d', strtotime($s));
						$query->where('date_of_birth', $date);
					}else if(is_numeric ($s)){
						$query->where('patients.id', $s)
							->orWhere('name','LIKE' ,'%' .$s. '%')
							->orWhere('email','LIKE' ,'%' .$s. '%')
							->orWhere('postcode','LIKE' ,'%' .$s. '%');
					}else{
						$query->where('name','LIKE' ,'%' .$s. '%')
							->orWhere('email','LIKE' ,'%' .$s. '%')
							->orWhere('postcode','LIKE' ,'%' .$s. '%');
					}
				}
			});
		}
		$query1 = $query;
		$total_patients = $query1->count();
        $patients = $query->paginate(10);
		return view('prescribers.patients')
			->with('sort', $sort)
			->with('orderby', $orderby)
			->with('patients', $patients)
			->with('prescibers_belongs_patient_ids', $prescibers_belongs_patient_ids)
			->with('total_patients', $total_patients);
    }
	/**
     * Loads all patients prescriptions generated by authenticated prescriber.
     *
     * @param  $id
     * @return View
     */
	public function getPatientPrescriptionsInfo($id){
		try{
			$patient = Patients::find($id);
			if(!$patient){
				throw new \Exception("Patient's information is not found.");
			}
			$prescriber_ids = [];
			if($patient->prescribers){
				foreach($patient->prescribers as $presciber){
					$prescriber_ids[] = $presciber->id;
				}
			}
			if(!in_array(Auth::guard('prescriber')->user()->id, $prescriber_ids)){
				throw new \Exception("This patient's prescriptions information already exists, but didn't provide request consent to you.");
			}
			$sort = Request::get('sort') ? Request::get('sort') : 'desc';
			$orderby = Request::get('orderby') ? Request::get('orderby') : 'date';
			$query = Prescriptions::where('patient_id', $id)->orderBy($orderby,$sort);
			if(Request::has('s') && Request::get('s')){
				$s = trim(Request::get('s'));
				$query->where(function($query) use ($s){
					if(Request::has('s-from')){
						$s_from = Request::get('s-from');
						if(in_array('uid', $s_from)){
							$query->where('uid','LIKE' ,'%' .$s. '%');
						}
						if(in_array('summary', $s_from)){
							$prescription_ids = PrescriptionsDrugs::where('drugs.name','LIKE' ,'%' .$s. '%')->join('drugs','prescriptions_drugs.drugs_id', '=', 'drugs.id')->select('prescriptions_drugs.prescriptions_id')->get();
							$ids = [];
							foreach($prescription_ids as $id){
								$ids[] = $id->prescriptions_id;
							}
							$ids = array_unique($ids);
							$query->orWhereIn('prescriptions.id',$ids);
						}
					}else{
						$prescription_ids = PrescriptionsDrugs::where('drugs.name','LIKE' ,'%' .$s. '%')->join('drugs','prescriptions_drugs.drugs_id', '=', 'drugs.id')->select('prescriptions_drugs.prescriptions_id')->get();
						$ids = [];
						foreach($prescription_ids as $id){
							$ids[] = $id->prescriptions_id;
						}
						$ids = array_unique($ids);
						$query->whereIn('id',$ids)->orWhere('uid','LIKE' ,'%' .$s. '%');
					}
				});
			}
			$query1 = $query;
			$total_prescriptions = $query1->count();
			$prescriptions = $query->paginate(10);

			return view('prescribers.patient-info')
				->with('sort', $sort)
				->with('orderby', $orderby)
				->with('prescriptions', $prescriptions)
				->with('patient', $patient)
				->with('total_prescriptions', $total_prescriptions);

		}catch(\Exception $e){
			Session::put('message' , $e->getMessage());
			Session::put('alert-type' , 'alert-warning');
			return Redirect::to('/prescribers/patients');
		}
	}

	/**
     * Loads Prescriber Profile View
     *
     * @param  NULL
     * @return View
     */
	public function getPrescriberProfile(){
		$prescriber_id = Auth::guard('prescriber')->user()->id;
		$answered_question = PrescribersSecurityAnswers::where('prescribers_id', $prescriber_id)
                ->join('questions_set', 'prescribers_security_questions_answers_set.question_id', '=', 'questions_set.id')
                ->select('questions_set.question', 'prescribers_security_questions_answers_set.answer', 'prescribers_security_questions_answers_set.question_id')
                ->get();
		$questions_sets = QuestionsSet::all();
		return view('prescribers.profile')->with('answered_question', $answered_question)->with('questions_sets', $questions_sets);
	}

	/**
     * Update prescriber profile
     *
     * @param  NULL
     * @return success
     */
	public function updatePrescriberProfile(){
		$prescriber_id = Auth::guard('prescriber')->user()->id;
		$all = Request::all();
		$validator = Validator::make($all, [
				'first_name' => 'required|max:100',
				'last_name' => 'required|max:100',
				'clinic_email' => 'required|max:200|email',
				'phone_number' => 'required',
				'clinic_phone_number' => 'required',
				'name_of_clinic' => 'required',
				'question_set_1' => 'required',
			],
			[
				'first_name.required' => 'Enter your first name.',
				'last_name.required' => 'Enter your last name.',
				'clinic_email.required' => 'Enter your clinic email',
				'clinic_email.email' => 'Enter valid clinic email',
				'phone_number.required' => 'Enter your phone number',
				'clinic_phone_number.required' => 'Enter your clinic phone number',
				'name_of_clinic.required' => 'Enter your name of the clinic',
				'practitioner_type.required' => 'Enter your practitioner type',
				'practitioner_number.required' => 'Enter your practitioner number',
				'practitioner_expiry_date.required' => 'Enter your practitioner expiry date',
				'question_set_1.required' => 'Please select your security question.',
				'answer_set_1.required' => 'Please enter your security answer.'
			]
		);
		$validator->sometimes('answer_set_1', 'required', function($input){
			return $input->question_set_1 != '';
		});
		$validator->sometimes('practitioner_type', 'required', function($input){
			return Auth::guard('prescriber')->user()->role_id != 4;
		});
		$validator->sometimes('practitioner_number', 'required', function($input){
			return Auth::guard('prescriber')->user()->role_id != 4;
		});
		$validator->sometimes('practitioner_expiry_date', 'required', function($input){
			return Auth::guard('prescriber')->user()->role_id != 4;
		});
		$validator->sometimes('practitioner_expiry_date', 'date_format:d-m-Y', function($input){
			return Auth::guard('prescriber')->user()->role_id != 4;
		});
		if ($validator->fails()) {
            return redirect('/prescribers/my-profile')->withErrors($validator)->withInput();
        }
		try{
			$prescriber = Prescribers::find($prescriber_id);
			$prescriber->first_name = Request::get('first_name');
			$prescriber->last_name = Request::get('last_name');
			$prescriber->clinic_email = Request::get('clinic_email');
			$prescriber->phone_number = Request::get('phone_number');
			$prescriber->clinic_phone_number = Request::get('clinic_phone_number');
			$prescriber->name_of_clinic = Request::get('name_of_clinic');
			$prescriber->address = Request::get('address');
			$prescriber->town = Request::get('town');
			$prescriber->county = Request::get('county');
			$prescriber->postcode = Request::get('postcode');
			if(Auth::guard('prescriber')->user()->role_id != 4){
				$prescriber->practitioner_type = Request::get('practitioner_type');
				$prescriber->practitioner_number = Request::get('practitioner_number');
				$prescriber->practitioner_expiry_date = date('Y-m-d', strtotime(Request::get('practitioner_expiry_date')));
			}
			if(Request::has('sameEmail') && Request::get('sameEmail') == 'on'){
				$prescriber->send_to_clinic = true;
			}
			$prescriber->save();
			$update_answer = PrescribersSecurityAnswers::where('prescribers_id', $prescriber_id)->first();
			if ($update_answer != '') {
				$update_answer->question_id = Request::get('question_set_1');
				$update_answer->answer = Request::get('answer_set_1');
				$update_answer->save();
			}
			else {
				$update_answer = New PrescribersSecurityAnswers;
				$update_answer->prescribers_id = $prescriber_id;
				$update_answer->question_id = Request::get('question_set_1');
				$update_answer->answer = Request::get('answer_set_1');
				$update_answer->save();
			}
			if($prescriber->is_active == true && Auth::guard('prescriber')->user()->role_id != 4){
				/* update or create record on sped */
				$result = $this->updatePrescriberInfoToSped($prescriber);
			}
			Session::put('message' , 'Your profile has been updated successfully.');
			Session::put('alert-type' , 'alert-success');
			return Redirect::to('/prescribers/my-profile');
		}catch(\Exception $e){
			Session::put('message' , $e->getMessage());
			Session::put('alert-type' , 'alert-warning');
			return Redirect::to('/prescribers/my-profile');
		}
	}
	/**
     * update prescriber information to sped
     * 
	 * @param object prescriber
     * @return array
     */
	private function updatePrescriberInfoToSped($prescriber){
		try{
			$fm = new FileMakerService();
			$access_token = $fm->getFMAccessTokenFromSession();
			if($access_token){
				$reference_key = $prescriber->id.time();
				$request_params['fieldData'] = [
					'refKey' => $reference_key,
					'clinicName' => $prescriber->name_of_clinic,
					'firstName' => $prescriber->first_name,
					'lastName' => $prescriber->last_name,
					'email' => $prescriber->email,
					'origin' => 'PORTAL',
					'phone' => $prescriber->phone_number,
					'clinicEmail' => $prescriber->clinic_email,
					'practitionerType' => $prescriber->practitioner_type ? $prescriber->practitioner_type : '',
					'practitionerNumber' => $prescriber->practitioner_number ? $prescriber->practitioner_number : '',
					'practitionerExpiryDate' => $prescriber->practitioner_expiry_date ? date('m/d/Y', strtotime($prescriber->practitioner_expiry_date)) : '',
					'addressLine1' => $prescriber->address ? $prescriber->address : '',
					'addressLine2' => '',
					'addressLine3' => '',
					'city' => $prescriber->town ? $prescriber->town : '',
					'county' => $prescriber->county ? $prescriber->county : '',
					'postcode' => $prescriber->postcode ? $prescriber->postcode : '',
					'country' => $prescriber->country ? $prescriber->country : '',
					'updatedUser' => Auth::guard('prescriber')->user()->email,
					'updatedTimestamp' => date('m/d/Y H:i:s'),
				];
				/* If have record then update else create new one */
				if($prescriber->sped_pk){
					$request_params['fieldData']['insertUpdateFlag'] = 'UPDATE';
					$request_params['fieldData']['prescriberPk'] = $prescriber->sped_pk;
					$request_params['script'] = 'RestDataAPIProcessPrescriberTempRecord';
					$request_params['script.param'] = $reference_key;
				
					$response = $fm->updatePrescriberProfileDetails($access_token, $request_params);
					$return = [];
					if($response->messages && $response->messages[0]->message == 'OK') {
						$return['status'] = true;
						$return['message'] = 'OK';
						return $return;
					}else{
						throw new \Exception($response->messages[0]->message);
					}
				}else{
					$request_params['fieldData']['createdUser'] = Auth::guard('prescriber')->user()->email;
					$request_params['fieldData']['createdTimestamp'] = date('m/d/Y H:i:s');
					$request_params['fieldData']['insertUpdateFlag'] = 'INSERT';
					$request_params['script'] = 'RestDataAPIProcessPrescriberTempRecord';
					$request_params['script.param'] = $reference_key;
					
					$response = $fm->importPrescriberInformationToSped($access_token, $request_params);
					$return = [];
					if($response->messages && $response->messages[0]->message == 'OK') {
						$return['status'] = true;
						$script_result = json_decode($response->response->scriptResult);
						$sped_prescriber_pk = $script_result->prescriberPrimaryKey;
						$prescriber->sped_record_id = $response->response->recordId;
						$prescriber->sped_pk = $sped_prescriber_pk;
						$prescriber->save();
						$return['message'] = 'OK';
						return $return;
					}else{
						throw new \Exception($response->messages[0]->message);
					}
				}
			}else{
				throw new \Exception('Issue with retriving sped access token');
			}
		}catch(\Exception $e){
			$return['status'] = false;
			$return['message'] = $e->getMessage();
			return $return;
		}
	}
}
